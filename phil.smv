--
-- CSC 322 Project 3
--
-- Name: Sara Subedi, Julia Hoang, Angus Bews
-- Vnum: ___________, ___________, V00980317
--
--
MODULE main

VAR
  chopsticks : array 0..4 of {nobody,0,1,2,3,4}; -- who holds the chopstick.
  permission : {0,1,2,3,4}; -- who is currently allowed to be eating (sequential, only one philosopher allowed at a time)
  --
  -- Philosopher i has chopstick i on left and chopstick
  -- (i + 1) mod 5 on right, and they may or may not be currently allowed to eat
  --
  p0 : process philosopher(0,chopsticks[0],chopsticks[1],permission);
  p1 : process philosopher(1,chopsticks[1],chopsticks[2],permission);
  p2 : process philosopher(2,chopsticks[2],chopsticks[3],permission);
  p3 : process philosopher(3,chopsticks[3],chopsticks[4],permission);
  p4 : process philosopher(4,chopsticks[4],chopsticks[0],permission);

ASSIGN
  --
  -- Initially, all chopsticks are free
  --
  init(chopsticks[0]) := nobody;
  init(chopsticks[1]) := nobody;
  init(chopsticks[2]) := nobody;
  init(chopsticks[3]) := nobody;
  init(chopsticks[4]) := nobody;
  init(permission) := 0; -- Philosopher 0 will start with permission to eat

MODULE philosopher(i,left,right,permission)

VAR
  state : {thinking, hungry, eating, done};

DEFINE
  --
  -- These are just abbreviations, not state variables
  --
  gotleft := (left=i);
  gotright := (right=i);
  leftfree := (left=nobody);
  rightfree := (right=nobody);
  chosen := (permission=i); -- who is given permission to eat

ASSIGN
  init(state) := thinking;

  next(left)  := case
    (state = done) : nobody; -- drop chopstick
    --
    -- if hungry and left chopstick is free and is given permission, take it
    --
    (state=hungry) & leftfree & chosen : i;
    TRUE : left;
  esac;

  next(right) := case
    (state = done) : nobody; -- drop chopstick
    --
    -- if hungry and have left chopstick and right is free and is given permission, take it
    --
    (state=hungry) & gotleft & rightfree & chosen : i;
    TRUE : right;
  esac;

  next(state) := case
    (state=thinking) : {thinking, hungry};
    (state=hungry) & gotleft & gotright : eating;
    (state=hungry) : hungry; -- don't have chopsticks
    (state=eating) : {eating, done};
    (state=done) : thinking;
    TRUE : state;
  esac;

  next(permission) := case
    (state=thinking) & chosen : (i+1) mod 5; -- If philosopher is thinking but has permission, pass it over to the next philosopher
    (state=done) & chosen : (i+1) mod 5; -- If philosopher finished eating, pass permission to the next philosopher
    TRUE : permission; -- Otherwise keep it as is
  esac;

-- add fairness constraints here
FAIRNESS running
FAIRNESS !(state = eating)

-- add specifications here

-- safety:
SPEC AG((state = eating) -> (gotleft & gotright))

-- liveness:
SPEC AG((state = hungry) -> AF (state = eating))